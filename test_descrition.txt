 General test descrition:
  The test purpos was to test basic integration for sign by HSM -> verify by mbedtls procedure.
  To achieve this purpose I performed following steps:
  1. Disable all random dtls opearations (use not random "random" function).
  2. In MBEDTLS_SSL_SERVER_KEY_EXCHANGE handshake step   print hush of server output and manualy send it to HSM to recieve signature. 
  3. HSM signature was added to server MBEDTLS_SSL_SERVER_KEY_EXCHANGE output (using ssl_async_resume () function) and sent to client for verification.
  4. From this point dtls handshake continue in it's regular way.
    
 Test run :
 Run server side:
 programs/ssl/ssl_server2 server_port=1122 auth_mode=optional force_ciphersuite=TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256 curves=secp256r1 async_operations=s crt_file="hsm_pub_key_cert.pem"
 Run client side:
 programs/ssl/ssl_client2 server_port=1122 auth_mode=optional force_ciphersuite=TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256 curves=secp256r1

 
 config.h: enable MBEDTLS_SSL_ASYNC_PRIVATE_C
 replace mbedtls_ctr_drbg_random()function with some "not random" function 
 prevent adding time to random ssl buffer in file ssl_cli.c, ssl_generate_random() function
 prevent adding time to ssl server hellow buffer in file ssl_srv.c, ssl_write_server_hello() function 
 ssl_server2.c: implement your callback for ssl_async_start() function. I implemeted it to do nothing, only context allocations, becaouse my test has precalculated signature and
 ssl_server2.c: implement your callback for ssl_async_resume () function. I coied to output buffer pre-calculated by HSM signature and free allocated in ssl_async_start() fnctions
 enable uploading Server certificate without priavte key (private key is saved in HSM) by comment relevant lines in ssl_server2.c
 
 